<html><head>
<title>INFO 3300 - February 17</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>
  <script src="https://d3js.org/d3.v5.min.js"></script>
  <style>
  
    .legend span {
      margin-right: 10px;
    }

    .gridlines line {
      stroke: #bbb;
    }

    .gridlines .domain {
      stroke: none;
    }

  </style>

</head>
<body>
  <div class="container larger">
  <h3>Prompt for February 17</h3>
  <p>
    Project 1 has started up! Make sure that you are submitting Milestone 0 and Milestone 1.
  </p>
  <p>
    Check out <a href="https://mimno.github.io/showcase/#p1">Professor Mimno's project showcase</a> from a past iteration of INFO3300. There are some interesting projects there that might inspire you.
  </p>
  <p>
    Our dataset is sourced from <a href="https://www.kaggle.com/bidyutchanda/top-10-highest-grossing-films-19752018">Kaggle</a>. It contains the top ten highest grossing movies for each year from 1975 to 2018. We'll graph the movies to see if certain genres perform better or are more popular in certain times.
  </p>
  <p>
    The d3.csv command makes use of the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch API</a>. To learn more about why we use ".then", check out the documentation on <a href="https://developers.google.com/web/fundamentals/primers/promises">JS Promises</a>.
  </p>
  <p>
    You'll find some more useful links sprinkled in the code.
  </p>

  <h5>HTML for today:</h5>

  <svg id="scatterplot" height="400" width="600" style="margin-top:50px" >
    <text id="label" x="590" y="5"  text-anchor="end" alignment-baseline="hanging"></text>
  </svg>
  
  <div id="scatterLegend" class="legend"> </div>




  <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
  <h5>Code for today:</h5>
  <pre>
    <code id="display1" class="hljs javascript">
    </code>
  </pre>

  <!--- Code for today's class --->
  <script id="notes1">


  // 0. Let's make a fancy scatterplot
  const svg = d3.select("svg#scatterplot");
  
  const width = svg.attr("width");
  const height = svg.attr("height");
  const margin = {top: 10, right: 10, bottom: 50, left: 50};
  
  const chartWidth = width - margin.left - margin.right;
  const chartHeight = height - margin.top - margin.bottom;


  // This time we'll use another layer to make sure things stay ordered properly
  //  Remember that SVG draws from the top down, layering things on top of one another
  let annotations = svg.append("g").attr("id","annotations");
                  // No translate here since our annotations may be outside of the chart area
                  
  let chartArea = svg.append("g").attr("id","points")
                  .attr("transform","translate("+margin.left+","+margin.top+")");



  // Import some CSV data
  //   This time we'll use the autotyper
  d3.csv("../datasets/blockbusters.csv",d3.autoType)
    .then( (data) => {
    
  // ------- START OF PROMISE ------
      
      
  
  // 1. Check for data issues
  // console.log(data)
  data.forEach(d=>{
    d['worldwide_gross'] = Number(d['worldwide_gross'].replace(/,/g, "").replace(/\$/g,""))
  })
  // console.log(data)


  // Here are some scales
  // Notice the new function, d3.extent()
  const yearExtent = d3.extent(data, d => d['year']);
  const yearScale = d3.scaleLinear().domain(yearExtent).range([0, chartWidth]);
  
  const grossExtent = d3.extent(data, d => d['worldwide_gross']);
  const grossScale = d3.scaleLog().domain(grossExtent).range([chartHeight, 0]);
  
  const imdbExtent = d3.extent(data, d => d['imdb_rating']);
  const imdbScale = d3.scaleLinear().domain(imdbExtent).range([3,8]);

  const genreScale = d3.scaleOrdinal(d3.schemeCategory10)
  
  // 2. Draw some axes, make them fancy
  let leftAxis = d3.axisLeft(grossScale)
                   .tickFormat(d3.format("$.0s"))
  let leftGridlines = d3.axisLeft(grossScale)
                        .tickSize(-chartWidth-10)
                        .tickFormat("")
  
  // Y axis
  annotations.append("g")
    .attr("class", "y axis")
    .attr("transform","translate("+(margin.left-10)+","+margin.top+")")
    .call(leftAxis)
  
    // .selectAll("text")   // Hack to prevent label overlap
    // .style("text-anchor","end");
  annotations.append("g")
    .attr("class", "y gridlines")
    .attr("transform","translate("+(margin.left-10)+","+margin.top+")")
    .call(leftGridlines);
  
  // X axis
  let bottomAxis = d3.axisBottom(yearScale)
                     .tickFormat(d3.format("~f"))
  let bottomGridlines = d3.axisBottom(yearScale)
                          .tickSize(-chartHeight-10)
                          .tickFormat("")
  annotations.append("g")
    .attr("class", "x axis")
    .attr("transform","translate("+margin.left+","+(chartHeight+margin.top+10)+")")
    .call(bottomAxis);
  annotations.append("g")
    .attr("class", "x gridlines")
    .attr("transform","translate("+margin.left+","+(chartHeight+margin.top+10)+")")
    .call(bottomGridlines);
    
  // These scales, as written in the prompt, look a bit weird
  //  Let's use tickFormat to make better ones
  // Here is a huge guide on d3 tickformatting: https://github.com/d3/d3-format
  
  
  // 3. Start plotting circles and see what happens
  data.forEach( (d, i) => {
    
    let circle = chartArea.append("circle")
        .attr("cx", yearScale(d['year']))
        .attr("cy", grossScale(d['worldwide_gross']+1))
        .attr("r", imdbScale(d['imdb_rating']))
        .attr("opacity", 0.8)
        .style("fill", genreScale(d['Main_Genre']))
        .attr("label", d["title"])
        .attr("genre", d["Main_Genre"]);
        
    // 4. How do we add colors based on genre?
    //  New color scale: https://observablehq.com/@d3/d3-scaleordinal
        

    // 5. Add some mouseovers
    
    circle.on("mouseover", function(){
      d3.select(this)
        // .style("fill","none")
        .style("stroke","black")
        .style("stroke-width",4)
        .style("fill",lighten(genreScale(d['Main_Genre'])))
      d3.select('#label').text(d['title'])
    })
    
    circle.on("mouseout", function(){
      d3.select(this)
        // .style("fill","none")
        .style("stroke","none")
        .style("stroke-width",1)
        .style("fill",genreScale(d['Main_Genre']))
      d3.select('#label').text("")
    })
    

  });
  // done with forEach


  
  // 6. How can we make a simple legend?
  //console.log(genreScale.domain())
  
  
  
  
  
  // How do we add a "clear" button to this to clear the filters?
  //   Try it out in HW4!
  
  
  

  
  // ------- END OF PROMISE ------

},
(error) => { console.log(error) } );






  // HELPER FUNCTION
  //  lighten a color a little bit using d3 color functions
  function lighten(color) {
      
      let hclColor = d3.hcl(color);
      let luma = Math.min(130, hclColor.l + 30);
      return d3.rgb( d3.hcl( hclColor.h, hclColor.c, luma ) );
    
  }

  </script>




  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  document.getElementById("display1").innerText = document.getElementById("notes1").innerText;
  hljs.initHighlightingOnLoad();
  </script>



  </div>
</body>
</html>
