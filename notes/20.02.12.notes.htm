<html><head>
<title>INFO 3300 - February 12</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>
  
  <script src="https://d3js.org/d3.v5.min.js"></script>
  
  <style>
  
    .gridlines line {
      stroke: #bbb;
    }

    .gridlines .domain {
      stroke: none;
    }

  </style>

</head>
<body>
  <div class="container larger">
  <h3>Notes for February 12</h3>
  <p>
    Project 1 has started up! Log in to CMS to find your teammates and project instructions.
  </p>
  <p>
    Check out <a href="https://mimno.github.io/showcase/#p1">Professor Mimno's project showcase</a> from a past iteration of INFO3300. There are some interesting projects there that might inspire you.
  </p>
  <p>
    Our dataset is sourced from Gapminder. We'll do a spinoff on one of <a href="https://youtu.be/jbkSRLYSojo">Hans Rosling's famous data presentations</a>.
  </p>
  <p>
    The d3.csv command makes use of the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch API</a>. To learn more about why we use ".then", check out the documentation on <a href="https://developers.google.com/web/fundamentals/primers/promises">JS Promises</a>.
  </p>

  <h5>HTML for today:</h5>

  <svg id="scatterplot" height="400" width="400" style="margin-top:50px" >

  </svg>
  <div id="simpleLegend" class="legend"> </div>




  <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
  <h5>Code for today:</h5>
  <pre>
    <code id="display1" class="hljs javascript">
    </code>
  </pre>

  <!--- Code for today's class --->
  <script id="notes1">


  // Let's make a plain old scatterplot

  // 0. Find our SVG and get that ready
  //     We're going to use a new way of padding that makes axes easier
  // INTRODUCE CONST
  const svg = d3.select("svg#scatterplot");
  const width = svg.attr("width");
  const height = svg.attr("height");
  const margin = {"top": 10, "right": 10, "bottom": 50, "left": 50};
  const chartWidth = width - margin.right - margin.left;
  const chartHeight = height - margin.top - margin.bottom;
  
  let scatter = svg.append("g").attr("transform", "translate("+ margin.left +","+ margin.top +")");
  

  // 1. Import some CSV data
  // We're going to use d3.csv, which loads data from the web. It returns a "promise" that some time in the future it will have the data
  // .then is triggered by the promise if it successfully calls back
  // otherwise an error may be recorded
  
  // This is important because it allows us to work "asynchronously" and not hold up the browser
  // We'll see another construction that's even more flexible later this term (async + await)
  
  d3.csv(  "../datasets/gapminder.csv").then((data)=>{
    console.log(data);

  },(error)=>{
    console.log(error);
  }
  
  );
  
  

  // 2. Check for data issues

  // Let's fix some things up
  
  
  
  // There's an easier way to deal with *some* basic formatting issues



  // 3. Let's build some scales
  
  
  
  // 4. Start plotting circles and see what happens
  
  

  // Quick sanity checks


  
  
  // 5. Let's add some axes
  
  

  
  
  
  // 5A. We can manually make some gridlines
  // for (let i=0; i <= chartWidth; i = i + chartWidth/10) {
  //     scatter.append("line")
  //       .attr("x1",i)
  //       .attr("x2",i)
  //       .attr("y1",0)
  //       .attr("y2",chartHeight)
  //       .attr("stroke","lightgrey")
  //       .attr("stroke-width","1px");
  // }


  // 5B. Or we can use axes in a clever way (my recommended approach)
  
  
  
  
  
  // Next up: filtering, legends, and advanced formatting





  </script>




  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  document.getElementById("display1").innerText = document.getElementById("notes1").innerText;
  hljs.initHighlightingOnLoad();
  </script>



  </div>
</body>
</html>
