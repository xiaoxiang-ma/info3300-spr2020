<html><head>
<title>INFO 3300 - February 26</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>
  <script src="https://d3js.org/d3.v5.min.js"></script>
  <style>
  
    .gridlines line {
      stroke: #bbb;
    }

    .gridlines .domain {
      stroke: none;
    }

  </style>

</head>
<body>
  <div class="container larger">
  <h3>Prompt for February 26</h3>
  <p>
    Project 1 is almost finished! If your mentor still does not have your Github repo and all TAs cannot access it, then will be unable to grade your project.
  </p>
  <p>
    The dataset on this page comes from an interesting <a href="https://www.kaggle.com/suryak/prediction-of-co2-concentration-levels/notebook">notebook on Kaggle</a> about atmospheric CO2 concentrations. I'm using it for demo purposes and can't speak to the veracity of the data.
  </p>
  <p>
    Today we're looking at d3 line plots. They also use a data join, but it's a bit trickier to implement. <a href="https://github.com/d3/d3-shape">Here</a> is some documentation on d3.shape, the library used for making line charts, and <a href="https://github.com/d3/d3-time-format">here</a> is the documentation on d3.time. Recall what we learned at the start of class on SVG <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths">paths</a>.<br/>
  <p>
    If you're still confused about why we used translate in the last class, Mike Bostock has a <a href="https://bl.ocks.org/mbostock/3019563">handy page discussing chart margins</a>.
  </p>

  <h5>HTML for today:</h5>
  
  <svg id="lineplot" height="500" width="800" style="margin-top:50px" >
  </svg>
  


  <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
  <h5>Code for today:</h5>
  <pre>
    <code id="display1" class="hljs javascript">
    </code>
  </pre>

  <!--- Code for today's class --->
  <script id="notes1">

  // Do the usual things to set up the chart area and incorporate margins
  const svg = d3.select("svg#lineplot");
  const width = svg.attr("width");
  const height = svg.attr("height");
  const margin = {top: 10, right: 10, bottom: 50, left: 50};
  const chartWidth = width - margin.left - margin.right;
  const chartHeight = height - margin.top - margin.bottom;

  let annotations = svg.append("g").attr("id","annotations");
  let chartArea = svg.append("g").attr("id","points")
                  .attr("transform","translate("+margin.left+","+margin.top+")");

  // Import some CSV data
  d3.csv("../datasets/co2.csv", d3.autoType)
    .then( (data) => {
      
  // 1. Mercifully, the data import cleanly (because I already did some cleanup in Excel!)
  //      but... we need dates to work correctly -- for this we need JS Date objects
  console.log(data);
  
  // Make some Date objects
  const timeparser = d3.timeParse('%Y-%m-%d');
  data.forEach(element => {
    element['date'] = timeparser(element["String Date"])
  });
  
  // Scales
  //  First one is easy and already done for us
  const carbonExtent = d3.extent(data, d => d['Carbon Dioxide (ppm)']);
  const carbonScale = d3.scaleLinear().domain(carbonExtent).range([chartHeight, 0]);
  
  // 2. Second, we need to spread dates across the X axis
  // Since we made JS date objects, we can use the usual D3 functions and a .scaleTime()
  const dateExtent = d3.extent(data, d => d['date']);
  const dateScale = d3.scaleTime().domain(dateExtent).range([0,chartWidth]);
  
  
  // Axes are already done for us -- check previous notes for more details
  // Y axis
  let leftAxis = d3.axisLeft(carbonScale)
  let leftGridlines = d3.axisLeft(carbonScale)
                        .tickSize(-chartWidth-10)
                        .tickFormat("")
  annotations.append("g")
    .attr("class", "y axis")
    .attr("transform","translate("+(margin.left-10)+","+margin.top+")")
    .call(leftAxis)
  annotations.append("g")
    .attr("class", "y gridlines")
    .attr("transform","translate("+(margin.left-10)+","+margin.top+")")
    .call(leftGridlines);
  // 
  // X axis
  let bottomAxis = d3.axisBottom(dateScale)
  let bottomGridlines = d3.axisBottom(dateScale)
                          .tickSize(-chartHeight-10)
                          .tickFormat("")
  annotations.append("g")
    .attr("class", "x axis")
    .attr("transform","translate("+margin.left+","+(chartHeight+margin.top+10)+")")
    .call(bottomAxis);
  annotations.append("g")
    .attr("class", "x gridlines")
    .attr("transform","translate("+margin.left+","+(chartHeight+margin.top+10)+")")
    .call(bottomGridlines);
  
  
  // 3. Before we start drawing, we need a line generator
  //  this will help us to draw the path based on data, which otherwise is very complicated
  // NOTE: The line generator does not take in any data at this stage
  //  We're just "programming" it to know what to do when you hand it data
  //  In other words, we're saying "when you get a data point, here's what your X value should be" using functions
  var lineGen = d3.line()
                  .x( d => dateScale(d['date']) )
                  .y( d => carbonScale(d['Carbon Dioxide (ppm)']) )
                  .curve(d3.curveMonotoneX);
  
  // 4. Append a <path>, bind the data, and run the generator 
  //  The generator is "run" in the last command.
  chartArea.append("path")
           .datum(data)
           .attr("class", "line")
           .attr("fill", "none")
           .attr("stroke", "steelblue")
           .attr("stroke-width", 3)
           .attr("d", lineGen);
           // .datum has given our entire dataset to the <path> element
           // so, because lineGen is a _function_, the .attr("d", lineGen) command is really working like
           //    a data-based .attr call, such as .attr("d", d => lineGen(d)). Because we've put the whole dataset
           //    into the <path> element, this works out so that we're really saying lineGen(data)
  
  
  // 5. Let's add some circles too!
  chartArea.selectAll("circle").data(data)
            .join("circle")
            .attr("r",3)
            .attr("fill","red")
            .attr("cx", d => dateScale(d['date']))
            .attr("cy", d => carbonScale(d['Carbon Dioxide (ppm)']))

  
  // 6. Stretch goal - add a detailed mouseover
  // chartArea.append("circle")
  //   .attr("fill","green")
  //   .attr("r",4)
  //   .attr("id","highlight");
  
  // chartArea.on("mousemove", function() {
  //   let location = d3.mouse(this);
  //   chartArea.select("circle#highlight")
  //             .attr("cx",location[0])
  //             .attr("cy",location[1]);

  // })
  // Start simple
  
  
  
  
  
  
  // More complicated
  let mouseGroup = chartArea.append("g")
  
  mouseGroup.append("circle")
    .attr("fill","red")
    .attr("r",5)
    .attr("id","highlight");

   let activeRegion = mouseGroup.append("rect")
    .attr("id","activeRegion")
    .attr("width",chartWidth)
    .attr("height",chartHeight)
    .attr("fill","none")
    .attr("pointer-events","all");

  mouseGroup.on("mouseover", function() {
    let location = d3.mouse(this);
    
    

  });
  mouseGroup.on("mousemove", function() {
    let location = d3.mouse(this);
    chartArea.select("circle#highlight")
              .attr("cx",location[0])
              .attr("cy",location[1]);
  });
  mouseGroup.on("mouseout", function() {
    // d3.select("circle#highlight").remove()
  });
  
  
  
  
  // More complicated
  // Instead, we have to resort to a more complicated solution
  // We paint an active region on the chart that is invisible but "catches" the mouse events for us
  let mouseGroup = chartArea.append("g");
  let activeRegion = mouseGroup.append("rect")
    .attr("id","activeRegion")
    .attr("width",chartWidth)
    .attr("height",chartHeight)
    .attr("fill","none")
    .attr("pointer-events","all");
  
  
  // This version is very blinky -- that's because the mouseover and mouseout "fight" with each other
  // We need to re-order our elements a bit to make things work as expected
  // We'll resolve this at the start of class, and then do better
  mouseGroup.on("mouseover", function() {
    let location = d3.mouse(this);
    
    mouseGroup.append("circle")
      .attr("fill","gold")
      .attr("r", 4)
      .attr("id", "highlight");
    
  });
  mouseGroup.on("mousemove", function() {
    let location = d3.mouse(this);
    console.log(location);
    chartArea.select("circle#highlight")
            .attr("cx",location[0])
            .attr("cy",location[1]);
  
  });
  mouseGroup.on("mouseout", function() {
    d3.select("circle#highlight").remove();
  });
  
  
  
  
  
  
  
  
  
  }, error => {console.log(error); } );  
  
  
  
  
  // For copy-paste later in class:
  // // Make an active region rectangle that's invisible to "catch" mouse events
  // let activeRegion = mouseGroup.append("rect")
  //   .attr("id","activeRegion")
  //   .attr("width",chartWidth)
  //   .attr("height",chartHeight)
  //   .attr("fill","none")
  //   .attr("pointer-events","all");
  
  
  // // Add marker lines, circles, and label
  // let xMarker = mouseGroup.append("line")
  //   .attr("id","xMarker")
  //   .attr("fill","none")
  //   .attr("stroke","black")
  //   .attr("stroke-width",1)
  //   .attr("y1",0)
  //   .attr("y2",chartHeight)
  //   .attr("opacity",0);
  // 
  // let valueMarker = mouseGroup.append("circle")
  //   .attr("id","valueMarker")
  //   .attr("fill","none")
  //   .attr("stroke","black")
  //   .attr("stroke-width",2)
  //   .attr("r",10)
  //   .attr("opacity",0);
  // 
  // let label = mouseGroup.append("text")
  //   .attr("id","label")
  //   .attr("opacity",0);
  
  
  
  // activeRegion.on("mouseover", function() {
  //   xMarker.attr("opacity",1);
  //   valueMarker.attr("opacity",1);
  //   label.attr("opacity",1); 
  // });
  // activeRegion.on("mouseout", function() {
  //   xMarker.attr("opacity",0);
  //   valueMarker.attr("opacity",0);
  //   label.attr("opacity",0); 
  // });
  // activeRegion.on("mousemove", function() {
  // 
  //   // xMarker.attr("x1",location[0]).attr("x2",location[0]);
  //   // valueMarker.attr("cx",location[0]).attr("cy",location[1]);
  //   // label.attr("x",).attr("y",).text();
  // 
  // });
  
  
  
  
  
  </script>
  
  
  
  
  
  


  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  document.getElementById("display1").innerText = document.getElementById("notes1").innerText;
  hljs.initHighlightingOnLoad();
  </script>



  </div>
</body>
</html>
