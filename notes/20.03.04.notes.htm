<html><head>
<title>INFO 3300 - March 4</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>
  <script src="https://d3js.org/d3.v5.min.js"></script>
  <script src="https://d3js.org/topojson.v2.min.js"></script>
  <style>

  .state {
    fill: lightgrey;
  }

  .outline {
    stroke: black;
    stroke-width: 1px;
    fill: none;
  }

  .graticule {
    fill: none;
    stroke: white;
  }

  </style>

</head>
<body>
  <div class="container larger">
  <h3>Notes for March 4</h3>
  <p>
    We have a new import at the top of the file: <a href="https://github.com/topojson/topojson">TopoJSON</a><br/>
    TopoJSON provides a helpful framework for storing, loading, and displaying topographical data. Check out its <a href="https://github.com/topojson/topojson-specification">data specification</a>.
  </p>
  <p>
    More on <a href="https://github.com/d3/d3-geo">d3.geo</a> and its <a href="https://github.com/d3/d3-geo#azimuthal-projections">geographic projections</a>.
  </p>

  <h5>HTML for today:</h5>


  <svg id="choropleth" height="400" width="600" style="background: #445; margin-top:50px" >

  </svg>

  <svg id="colorLegend" height="100" width="600" style="background: #fff; margin-top:30px" >

  </svg>


  <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
  <h5>Code for today:</h5>
  <pre>
    <code id="display1" class="hljs javascript">
    </code>
  </pre>


  <!--- Code for today's class --->
  <script id="notes1">

  const svg = d3.select("#choropleth");
  const width = svg.attr("width");
  const height = svg.attr("height");
  const margin = { top: 20, right: 20, bottom: 20, left:20};
  const mapWidth = width - margin.left - margin.right;
  const mapHeight = height - margin.top - margin.bottom;
  const map = svg.append("g")
                  .attr("transform","translate("+margin.left+","+margin.top+")");

  // 0. Let's explore a new way to use promises for data imports that might be a bit cleaner when importing lots of files
  
  // const testFunc = async function() {
  // 
  //   var start = Date.now();
  //   while (Date.now() < start + 10000) {}
  // 
  // }
  // testFunc();
  
  
  // 1. Our async function to build the map
  const requestData = async function() {
    
    // 2. Draw a map of US using topoJSON
    // 2a. Import data as synchronous call to topoJSON data file
    // Care of Mike Bostock:
    //   "../datasets/us.json"
    const us = await d3.json("../datasets/us.json");
    console.log(us);
    
    // 2b. Pick out topographic features and build d3 helpers
    var states = topojson.feature(us, us.objects.states);
    var statesMesh = topojson.mesh(us, us.objects.states);
    var projection = d3.geoAlbersUsa().fitSize([mapWidth, mapHeight], states);
    var path = d3.geoPath().projection(projection);
    
    console.log(statesMesh);
    // 2c. Draw states and outlines
    map.selectAll("path.state").data(states.features)
       .join("path")
       .attr("class", "state")
       .attr("note", d => d.id)
       .attr("d", path);
       
    map.append("path").datum(statesMesh)
       .attr("class","outline")
       .attr("d", path);
    
    
    // 3a. Import survey data as synchronous calls
    // "../datasets/us-state-names.tsv"
    // "../datasets/state-survey-responses.csv"
    var surveyData = await d3.csv("../datasets/state-survey-responses.csv");
    console.log(surveyData);
    var stateIDs = await d3.tsv("../datasets/us-state-names.tsv");
    console.log(stateIDs);
    
    // 3b. Generate the counts we will need
    let stateCounts = {}; // stateCounts[ stateName ] -> count
    let idToState = {}  // idToState[ stateID ] -> stateName
    
    stateIDs.forEach( row => {
      stateCounts[row.name] = 0;
      idToState[row.id] = row.name;
    });
    surveyData.forEach( row => {
      let splitRow = row.Boxes.split(", ");
      splitRow.forEach( state => {
        stateCounts[state] += 1;
      });
      
    });
    console.log(stateCounts)
    
    // 3c. Make a d3 color scale for frequency    
    const minMax = d3.extent(stateIDs, d => stateCounts[d.name] );
    console.log(minMax);
    
    const colorScale = d3.scaleSequential(d3.interpolateGnBu).domain(minMax);
    
    
    // 3d. Recolor the states to make a choropleth map
    map.selectAll(".state")
       .style("fill", d => colorScale( stateCounts[ idToState[d.id] ]) );
    
    // 3e. Use the extra legend code to draw a legend
    drawLegend(d3.select("#colorLegend"), colorScale);
    
    
    
    
    
    // 4. Add a tooltip that "sticks" below the state
    let tooltipWidth = 120;
    let tooltipHeight = 40;
    
    let tooltip = map.append("g")
                     .attr("class","tooltip")
                     .attr("visibility","hidden");
    tooltip.append("rect")
           .attr("fill", "black")
           .attr("opacity", 0.9)
           .attr("width",tooltipWidth)
           .attr("height",tooltipHeight)
    let txt = tooltip.append("text")
                     .attr("fill", "white")
                     .attr("text-anchor","middle")
                     .attr("alignment-baseline","hanging")
                     .attr("x", tooltipWidth / 2.0)
                     .attr("y", 2);
    let txt2 = tooltip.append("text")
                     .attr("fill", "white")
                     .attr("text-anchor","middle")
                     .attr("alignment-baseline","hanging")
                     .attr("x", tooltipWidth / 2.0)
                     .attr("y", 22);
    
    d3.selectAll(".state").on("mouseenter", mouseEntersPlot);
    d3.selectAll(".state").on("mouseout",  mouseLeavesPlot);

    function mouseEntersPlot() {
      
      tooltip.style("visibility","visible")
      
      let state = d3.select(this);
      state.attr("stroke","black")
           .attr("stroke-width", 3);
      
      
        
    }

    function mouseLeavesPlot() {
      
     tooltip.style("visibility","hidden");
     
     let state = d3.select(this);
     state.attr("stroke","none")
          .attr("stroke-width", 0);
    }
    
    
    
    
    
    
    
    
    
  };
  requestData();




  </script>





  
  <script>
    
    // Function needs a d3 selected SVG canvas where it will draw the legend and a source color scale
    function drawLegend(legend, legendColorScale) {
      
      // Bonus code here to draw an adaptive gradient legend so we can see different color scales for choropleth maps
      //  Credit Prof. Rz if you are basing a legend on this structure, and note SERIOUS PERFORMANCE CONSIDERATIONS
      
      //const legend = d3.select("#colorLegend");
      const legendWidth = legend.attr("width");
      const legendHeight = legend.attr("height");
      const legendMinMax = d3.extent(legendColorScale.domain()); // way to recover the minMax from most kinds of scales
      const barHeight = 60;
      const stepSize = 4; // warning, not using a canvas element so lots of rect tags will be created for low stepSize, causing issues with performance
      // Extend the minmax by 1 in either direction to expose more features
      const pixelScale = d3.scaleLinear().domain([0,legendWidth-40]).range([legendMinMax[0]-1,legendMinMax[1]+1]); // In this case the "data" are pixels, and we get numbers to use in colorScale
      const barScale = d3.scaleLinear().domain([legendMinMax[0]-1,legendMinMax[1]+1]).range([0,legendWidth-40]);
      const barAxis = d3.axisBottom(barScale);
      // Check if we're using a quantile scale - if so, we can do better
      if (legendColorScale.hasOwnProperty('quantiles')) {
        // Use the quantile breakpoints plus the min and max of the scale as tick values
        barAxis.tickValues(legendColorScale.quantiles().concat( legendMinMax ));
      }
      legend.append("g")
        .attr("class", "colorbar axis")
        .attr("transform","translate("+(20)+","+(barHeight+5)+")")
        .call(barAxis);
      // Draw rects of color down the bar
      let bar = legend.append("g").attr("transform","translate("+(20)+","+(0)+")")
      for (let i=0; i<legendWidth-40; i=i+stepSize) {
        bar.append("rect")
          .attr("x", i)
          .attr("y", 0)
          .attr("width", stepSize)
          .attr("height",barHeight)
          .style("fill", legendColorScale( pixelScale(i) )); // pixels => countData => color
      }
      // Put lines in to mark actual min and max of our data
      bar.append("line").attr("stroke","white").attr("stroke-width",3).attr("x1", barScale(legendMinMax[0])).attr("x2", barScale(legendMinMax[0])).attr("y1", 0).attr("y1", barHeight+4);
      bar.append("line").attr("stroke","white").attr("stroke-width",3).attr("x1", barScale(legendMinMax[1])).attr("x2", barScale(legendMinMax[1])).attr("y1", 0).attr("y1", barHeight+4);
      
    }
  </script>




  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  document.getElementById("display1").innerText = document.getElementById("notes1").innerText;
  hljs.initHighlightingOnLoad();
  </script>



  </div>
</body>
</html>
