<html><head>
<title>INFO 3300 - March 9</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>
  <script src="https://d3js.org/d3.v5.min.js"></script>
  <script src="https://d3js.org/topojson.v2.min.js"></script>
  <style>

  .neighborhood {
    fill: #EEE;
    stroke: white;
    stroke-width: 2px;
  }

  </style>

</head>
<body>
  <div class="container larger">
  <h3>Notes for March 9</h3>
  <p>
    We have a new import at the top of the file: <a href="https://github.com/topojson/topojson">TopoJSON</a><br/>
    TopoJSON provides a helpful framework for storing, loading, and displaying topographical data. Check out its <a href="https://github.com/topojson/topojson-specification">data specification</a>.
  </p>
  <p>
    More on <a href="https://github.com/d3/d3-geo">d3.geo</a> and its <a href="https://github.com/d3/d3-geo#azimuthal-projections">geographic projections</a>.
  </p>
  <p>
    Today's data (both geoJSON and CSV) comes from the <a href="https://datasf.org/opendata/">DataSF</a> municipal open data initiative. I used <a href="https://mapshaper.org/">mapShaper</a> to convert the geoJSON file into a topoJSON file, which is much smaller.
  </p>


  <h5>HTML for today:</h5>

  <svg id="points" height="900" width="900" style="background: #fff; margin-top:50px" >

  </svg>
  
  

  <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
  <h5>Code for today:</h5>
  <pre>
    <code id="display1" class="hljs javascript">
    </code>
  </pre>


  <!--- Code for today's class --->
  <script id="notes1">

  const svg = d3.select("#points");
  const width = svg.attr("width");
  const height = svg.attr("height");
  const margin = { top: 20, right: 20, bottom: 20, left:20};
  const mapWidth = width - margin.left - margin.right;
  const mapHeight = height - margin.top - margin.bottom;
  const map = svg.append("g")
                  .attr("transform","translate("+margin.left+","+margin.top+")");

  // Let's make a map of all of the municipal trees in San Francisco
  // With any luck, we ought to be able to visualize the streets/blocks in the city, since trees line them
  //   (this is really just an excuse to make a lot of dots)
  
  // Datasets for today:
  //  "../datasets/SF-Neighborhoods.json"
  //  "../datasets/Street_Tree_List_smaller.csv"


  // 1. Make the visualization
  //  (refer to 03/04 notes for more comments)
  const requestData = async function() {
    
    const sf = await d3.json("../datasets/SF-Neighborhoods.json");
    console.log(sf);
    
    // We find that the feature we want to visualize is the SFNeighborhoods property within objects
    //  Always search .objects for different features to show in a topoJSON dataset
    var neighborhoods = topojson.feature(sf, sf.objects.SFNeighborhoods);
    
    // We use Mercator projection instead of a "better" projection because it's more familiar
    // It also leads to a flat line on the bottom of the city due to how the projection makes all
    //  latitude lines flat (which allows rhumb line equivalency)
    var projection = d3.geoMercator().fitSize([mapWidth, mapHeight], neighborhoods);
    var path = d3.geoPath().projection(projection);
    
    // Draw neighborhoods
    // Just as in our line generators, the scale is used by the generator to take complex data and
    //  generate fancy paths
    map.selectAll("path.neighborhood").data(neighborhoods.features)
      .join("path")
      .attr("class", "neighborhood")
      .attr("d", path);
      
      
    const trees = await d3.csv("../datasets/Street_Tree_List_smaller.csv");
    
    
    // We need to figure out where to position the dots. Since we may have a lot of them, let's process
    //  the data ahead of time and add to our dict
    // (Main reason for doing this is that otherwise we would have to call projection() twice, once
    //    for 'cx' and once for 'cy')
    trees.forEach( d => {
      
      // Use the projection just like a scale to convert from lng/lat to pixels
      d.Position = projection( [d.Longitude, d.Latitude] );
      
    });
    
    // Draw circles using the Positions we just made
    map.selectAll("circle").data(trees)
       .join("circle")
       .attr("r", 1)
       .attr("fill", "forestgreen")
       .attr("opacity", 0.4)
       .attr("cx", d => d.Position[0])
       .attr("cy", d => d.Position[1]);
    
    
    
  }
  requestData();
  
  
  




  </script>





  
  <script>
    
    // Function needs a d3 selected SVG canvas where it will draw the legend and a source color scale
    function drawLegend(legend, legendColorScale) {
      
      // Bonus code here to draw an adaptive gradient legend so we can see different color scales for choropleth maps
      //  Credit Prof. Rz if you are basing a legend on this structure, and note SERIOUS PERFORMANCE CONSIDERATIONS
      
      //const legend = d3.select("#colorLegend");
      const legendWidth = legend.attr("width");
      const legendHeight = legend.attr("height");
      const legendMinMax = d3.extent(legendColorScale.domain()); // way to recover the minMax from most kinds of scales
      const barHeight = 60;
      const stepSize = 4; // warning, not using a canvas element so lots of rect tags will be created for low stepSize, causing issues with performance
      // Extend the minmax by 1 in either direction to expose more features
      const pixelScale = d3.scaleLinear().domain([0,legendWidth-40]).range([legendMinMax[0]-1,legendMinMax[1]+1]); // In this case the "data" are pixels, and we get numbers to use in colorScale
      const barScale = d3.scaleLinear().domain([legendMinMax[0]-1,legendMinMax[1]+1]).range([0,legendWidth-40]);
      const barAxis = d3.axisBottom(barScale);
      // Check if we're using a quantile scale - if so, we can do better
      if (legendColorScale.hasOwnProperty('quantiles')) {
        // Use the quantile breakpoints plus the min and max of the scale as tick values
        barAxis.tickValues(legendColorScale.quantiles().concat( legendMinMax ));
      }
      legend.append("g")
        .attr("class", "colorbar axis")
        .attr("transform","translate("+(20)+","+(barHeight+5)+")")
        .call(barAxis);
      // Draw rects of color down the bar
      let bar = legend.append("g").attr("transform","translate("+(20)+","+(0)+")")
      for (let i=0; i<legendWidth-40; i=i+stepSize) {
        bar.append("rect")
          .attr("x", i)
          .attr("y", 0)
          .attr("width", stepSize)
          .attr("height",barHeight)
          .style("fill", legendColorScale( pixelScale(i) )); // pixels => countData => color
      }
      // Put lines in to mark actual min and max of our data
      bar.append("line").attr("stroke","white").attr("stroke-width",3).attr("x1", barScale(legendMinMax[0])).attr("x2", barScale(legendMinMax[0])).attr("y1", 0).attr("y1", barHeight+4);
      bar.append("line").attr("stroke","white").attr("stroke-width",3).attr("x1", barScale(legendMinMax[1])).attr("x2", barScale(legendMinMax[1])).attr("y1", 0).attr("y1", barHeight+4);
      
    }
  </script>




  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  document.getElementById("display1").innerText = document.getElementById("notes1").innerText;
  hljs.initHighlightingOnLoad();
  </script>



  </div>
</body>
</html>
