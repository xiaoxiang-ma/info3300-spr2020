<html><head>
<title>INFO 3300 - February 10</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>
  <script src="https://d3js.org/d3.v5.min.js"></script>

  <style>

  .hellodiv {
    padding: 10px;
    margin: 20px;
  }

  </style>

</head>
<body>
  <div class="container larger">
  <h3>Notes for February 10</h3>
  <p>
  	<a href="https://d3js.org/">D3</a> is a library that makes it easy to create and manipulate page elements. It's not restricted to SVG elements, but that's what we'll usually use it for. We'll start by using d3 to select DOM elements, create new elements, and modify the content and appearance of elements.
  </p>
  <p>
    You can find a bunch of D3 examples <a href="https://github.com/d3/d3/wiki/Gallery">here</a> and access <a href="https://github.com/d3/d3/blob/master/API.md">D3's online API reference</a>.
  </p>

  <h5>HTML for today:</h5>

  <svg id="all" height="400" width="400" style="background: #F5F5F5">
    <!--- We're going to be populating this dynamically today --->
  </svg>
  <br/>
  <svg id="male" height="400" width="300" style="background: #F5F5FF">
    <!--- We're going to be populating this dynamically today --->
  </svg>
  <svg id="female" height="400" width="300" style="background: #FFF5F5">
    <!--- We're going to be populating this dynamically today --->
  </svg>


  <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
  <h5>Code for today:</h5>
  <pre>
    <code id="display" class="hljs javascript">
    </code>
  </pre>

  <!--- Code for today's class --->
  <script id="notes">
  // First, some data:
  passengers = [{"age": 0, "lived": 21, "died": 13}, {"age": 5, "lived": 21, "died": 11}, {"age": 10, "lived": 12, "died": 16}, {"age": 15, "lived": 27, "died": 33}, {"age": 20, "lived": 64, "died": 115}, {"age": 25, "lived": 67, "died": 104}, {"age": 30, "lived": 132, "died": 285}, {"age": 35, "lived": 46, "died": 62}, {"age": 40, "lived": 28, "died": 57}, {"age": 45, "lived": 23, "died": 39}, {"age": 50, "lived": 27, "died": 25}, {"age": 55, "lived": 15, "died": 17}, {"age": 60, "lived": 11, "died": 16}, {"age": 65, "lived": 4, "died": 10}, {"age": 70, "lived": 0, "died": 5}, {"age": 75, "lived": 1, "died": 1}, {"age": 80, "lived": 1, "died": 0}];

  passengersFemale = [{"age": 0, "lived": 10, "died": 6}, {"age": 5, "lived": 12, "died": 3}, {"age": 10, "lived": 5, "died": 8}, {"age": 15, "lived": 23, "died": 5}, {"age": 20, "lived": 48, "died": 21}, {"age": 25, "lived": 42, "died": 14}, {"age": 30, "lived": 83, "died": 47}, {"age": 35, "lived": 35, "died": 5}, {"age": 40, "lived": 21, "died": 7}, {"age": 45, "lived": 17, "died": 6}, {"age": 50, "lived": 18, "died": 2}, {"age": 55, "lived": 11, "died": 1}, {"age": 60, "lived": 9, "died": 1}, {"age": 65, "lived": 4, "died": 1}, {"age": 70, "lived": 0, "died": 0}, {"age": 75, "lived": 1, "died": 0}, {"age": 80, "lived": 0, "died": 0}];

  passengersMale = [{"age": 0, "lived": 11, "died": 7}, {"age": 5, "lived": 9, "died": 8}, {"age": 10, "lived": 7, "died": 8}, {"age": 15, "lived": 4, "died": 28}, {"age": 20, "lived": 16, "died": 94}, {"age": 25, "lived": 25, "died": 90}, {"age": 30, "lived": 49, "died": 238}, {"age": 35, "lived": 11, "died": 57}, {"age": 40, "lived": 7, "died": 50}, {"age": 45, "lived": 6, "died": 33}, {"age": 50, "lived": 9, "died": 23}, {"age": 55, "lived": 4, "died": 16}, {"age": 60, "lived": 2, "died": 15}, {"age": 65, "lived": 0, "died": 9}, {"age": 70, "lived": 0, "died": 5}, {"age": 75, "lived": 0, "died": 1}, {"age": 80, "lived": 1, "died": 0}];

  // ---- 1. Let's make a doubled histogram of all passengers on the Titanic
  
  // 1. Let's make a doubled histogram of all passengers on the Titanic

  let svg = d3.select("svg#all");
  let width = svg.attr("width");
  let height = svg.attr("height");
  console.log(svg,width,height);

  let maxLivedorDied = d3.max(passengers,(d)=>{return d['died']});
  console.log(maxLivedorDied)
  let ageScale = d3.scaleLinear()
                    .domain([0,80]) //Data space
                    .range([10,width-10]); // Pixel
  console.log(ageScale(40));

  let livedScale = d3.scaleLinear()
                    .domain([0,160]) //Data space
                    .range([height/2,10]); // Pixel
  console.log(livedScale(80));
  // First two linear scales, age -> x-pixels, lived -> y-pixels

  // Think of "domain" and "range" as "input" and "output" or "data" to "pixels",
  //  NOT as x and y.

  // The domain takes a single argument, an array (NOT two arguments),
  // which represents two inputs. We often choose these to be
  // reasonable extremes, but the function will still work for
  // values outside these values.
  // The range works the same way: we give it a two-element array.
  // Behind the scenes, scaleLinear first does (value - domainMin) / (domainMax - domainMin)
  //  then it multiplies the result following this formula: (result * (rangeMax - rangeMin)) + rangeMin

  let svg = d3.select("svg#all");
  console.log(svg);
  let width = svg.attr("width");
  let height = svg.attr("height");

  passengers.forEach((d,i)=>{
    // console.log(d)
      svg.append("line")
          .attr("x1",ageScale(d['age']))
          .attr("x2",ageScale(d['age']))
          .attr("y1",height/2)
          .attr("y2",livedScale(d['lived']))
          .attr("stroke","#5555F0")
          .attr("stroke-width",10)
  });


  //   DEATHS SIDE
  // What do we need in order to be able to draw?
  
  let diedScale = d3.scaleLinear()
        .domain([0,160])
        .range([ height/2,height-10]);

    
  // Now let's draw some lines (shortcut instead of rects)

  passengers.forEach((d,i)=>{
    // console.log(d)
      svg.append("line")
          .attr("x1",ageScale(d['age']))
          .attr("x2",ageScale(d['age']))
          .attr("y1",height/2)
          .attr("y2",diedScale(d['died']))
          .attr("stroke","#F05555")
          .attr("stroke-width",10)
  });
  
  

  // Spoiler: something weird is going to happen about now



  // How about some labels? We can reuse our existing scales
  passengers.forEach(function(d,i) {
    
    // svg.append("text")
    //  .attr("text-anchor","middle")
    //  .attr("font-size","15px")
    //  .attr("x",ageScale(d['age'])).attr('y',10)
    //  .text(d['age']);

    // How can we get them to appear right above bars? 
    // USE THE SCALES!
    svg.append("text")
      .attr("text-anchor","middle")
      .attr("font-size","15px")
      .attr("x",ageScale(d['age'])).attr('y',height/2 - livedScale( d['lived'] ) - 10)
      .text(d['age']);
  });



  // 2. Let's break the data down by gender now!

  // TRY INCLUDING LET -- IT WILL CAUSE EXCEPTION BECAUSE WE'VE ALREADY DECLARED THE VARIABLE
  svg = d3.select("svg#male");
  console.log(svg)
  width = svg.attr("width");
  height = svg.attr("height");

  svg.append("text").text("Male Passengers").attr("x",10).attr("y",20).style("font-size","15px");


  // PASTED FROM ABOVE
  // WARNING: We don't want to recompute maxMortality for either of these two datasets
  //   Because we have a "total" plot at the top, we want to make sure comparisons across the bars are fair
  //   So we use maxMortality from that and comment it out in the gender plots
  // maxMortality = d3.max(passengersMale, function(d) { return Math.max(d['lived'],d['died']); });
  ageScale = d3.scaleLinear()
    .domain([0,80])
    .range([10,width-10]);
  livedScale = d3.scaleLinear()
    .domain([0,maxMortality])
    .range([10,height/2]);
  diedScale = d3.scaleLinear()
    .domain([0,maxMortality]) 
    .range([0,height/2-10]);

  // Why iterate 3 separate times? Do it all in one forEach
  passengersMale.forEach(function(d, i) {
    svg.append("line")
      .attr("x1",ageScale( d['age'] ))
      .attr("x2",ageScale( d['age'] ))
      .attr("y1",height/2)
      .attr("y2",height/2 - livedScale( d['lived'] ))
      .style("stroke", "#5555F0")
      .style("stroke-width", 10);
    svg.append("line")
      .attr("x1",ageScale( d['age'] ))
      .attr("x2",ageScale( d['age'] ))
      .attr("y1",height/2)
      .attr("y2",height/2 + diedScale( d['died'] ))
      .style("stroke", "#F05555")
      .style("stroke-width", 10);
    svg.append("text")
      .attr("text-anchor","middle")
      .attr("font-size","10px")
      .attr("x",ageScale(d['age'])).attr('y',height/2 - livedScale( d['lived'] ) - 10)
      .text(d['age']);
  });

  // Now do female side of dataset
  svg = d3.select("svg#female");
  console.log(svg)
  width = svg.attr("width");
  height = svg.attr("height");

  svg.append("text").text("Female Passengers").attr("x",10).attr("y",20).style("font-size","15px");
  // maxMortality = d3.max(passengersFemale, function(d) { return Math.max(d['lived'],d['died']); });
  ageScale = d3.scaleLinear()
    .domain([0,80]) // From our data
    .range([10,width-10]); // We want to space things inwards a bit
  livedScale = d3.scaleLinear()
    .domain([0,maxMortality]) // Start by picking arbitrary number (set at 200 for errors)
    .range([10,height/2]); // Let's end in the middle
  diedScale = d3.scaleLinear()
    .domain([0,maxMortality]) // Start by picking arbitrary number (we will come back to this)
    .range([0,height/2-10]); // Let's start in the middle

  // Why iterate 3 separate times?
  passengersFemale.forEach(function(d, i) {

    // Let's also create some fun color ranges
    //  More on this next week
    let colorLived = d3.scaleLinear().domain([0,100]).range(['darkblue','turquoise']).interpolate(d3.interpolateHcl);
    let colorDied = d3.scaleLinear().domain([0,50]).range(['darkred','pink']).interpolate(d3.interpolateHcl);

    svg.append("line")
      .attr("x1",ageScale( d['age'] ))
      .attr("x2",ageScale( d['age'] ))
      .attr("y1",height/2)
      .attr("y2",height/2 - livedScale( d['lived'] ))
      .style("stroke", colorLived( d['lived'] ))
      .style("stroke-width", 10);
    svg.append("line")
      .attr("x1",ageScale( d['age'] ))
      .attr("x2",ageScale( d['age'] ))
      .attr("y1",height/2)
      .attr("y2",height/2 + diedScale( d['died'] ))
      .style("stroke", colorDied( d['died'] ))
      .style("stroke-width", 10);
    svg.append("text")
      .attr("text-anchor","middle")
      .attr("font-size","10px")
      .attr("x",ageScale(d['age'])).attr('y',height/2 - livedScale( d['lived'] ) - 10)
      .text(d['age']);
  });

  </script>


  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  document.getElementById("display").innerText = document.getElementById("notes").innerText;
  hljs.initHighlightingOnLoad();
  </script>


  <!--- This is what our dataset looks like:

[
  {
    "age": 0,
    "lived": 21,
    "died": 13
  },
  {
    "age": 5,
    "lived": 21,
    "died": 11
  },
  {
    "age": 10,
    "lived": 12,
    "died": 16
  },
  {
    "age": 15,
    "lived": 27,
    "died": 33
  },
  {
    "age": 20,
    "lived": 64,
    "died": 115
  },
  {
    "age": 25,
    "lived": 67,
    "died": 104
  },
  {
    "age": 30,
    "lived": 132,
    "died": 285
  },
  {
    "age": 35,
    "lived": 46,
    "died": 62
  },
  {
    "age": 40,
    "lived": 28,
    "died": 57
  },
  {
    "age": 45,
    "lived": 23,
    "died": 39
  },
  {
    "age": 50,
    "lived": 27,
    "died": 25
  },
  {
    "age": 55,
    "lived": 15,
    "died": 17
  },
  {
    "age": 60,
    "lived": 11,
    "died": 16
  },
  {
    "age": 65,
    "lived": 4,
    "died": 10
  },
  {
    "age": 70,
    "lived": 0,
    "died": 5
  },
  {
    "age": 75,
    "lived": 1,
    "died": 1
  },
  {
    "age": 80,
    "lived": 1,
    "died": 0
  }
]


  --->


  </div>
</body>
</html>
