<html><head>
<title>INFO 3300 - February 26</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>
  <script src="https://d3js.org/d3.v5.min.js"></script>
  <style>
  
    .gridlines line {
      stroke: #bbb;
    }

    .gridlines .domain {
      stroke: none;
    }

  </style>

</head>
<body>
  <div class="container larger">
  <h3>Prompt for February 26</h3>
  <p>
    Project 1 is almost finished! Make sure that you submit Milestone 3 tonight. Also, if your mentor still does not have your Github repo and all TAs cannot access it, then will be unable to grade your project.
  </p>
  <p>
    The dataset on this page comes from an interesting <a href="https://www.kaggle.com/suryak/prediction-of-co2-concentration-levels/notebook">notebook on Kaggle</a> about atmospheric CO2 concentrations. I'm using it for demo purposes and can't speak to the veracity of the data.
  </p>
  <p>
    Today we're looking at d3 line plots. They also use a data join, but it's a bit trickier to implement. <a href="https://github.com/d3/d3-shape">Here</a> is some documentation on d3.shape, the library used for making line charts, and <a href="https://github.com/d3/d3-time-format">here</a> is the documentation on d3.time.<br/>
  <p>
    If you're still confused about why we used translate in the last class, Mike Bostock has a <a href="https://bl.ocks.org/mbostock/3019563">handy page discussing chart margins</a>.
  </p>

  <h5>HTML for today:</h5>
  
  <svg id="lineplot" height="500" width="800" style="margin-top:50px" >
  </svg>
  


  <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
  <h5>Code for today:</h5>
  <pre>
    <code id="display1" class="hljs javascript">
    </code>
  </pre>

  <!--- Code for today's class --->
  <script id="notes1">

  // Do the usual things to set up the chart area and incorporate margins
  const svg = d3.select("svg#lineplot");
  const width = svg.attr("width");
  const height = svg.attr("height");
  const margin = {top: 10, right: 10, bottom: 50, left: 50};
  const chartWidth = width - margin.left - margin.right;
  const chartHeight = height - margin.top - margin.bottom;

  let annotations = svg.append("g").attr("id","annotations");
  let chartArea = svg.append("g").attr("id","points")
                  .attr("transform","translate("+margin.left+","+margin.top+")");

  // Import some CSV data
  d3.csv("../datasets/co2.csv", d3.autoType)
    .then( (data) => {
      
  // 1. Mercifully, the data import cleanly (because I already did some cleanup in Excel!)
  //      but... we need dates to work correctly -- for this we need JS Date objects
  console.log(data);
  
  // Make some Date objects
  
  
  // Scales
  //  First one is easy and already done for us
  const carbonExtent = d3.extent(data, d => d['Carbon Dioxide (ppm)']);
  const carbonScale = d3.scaleLinear().domain(carbonExtent).range([chartHeight, 0]);
  
  // // 2. Second, we need to spread dates across the X axis
  // const dateExtent;
  // console.log(dateExtent);
  // const dateScale;
  
  
  // // Axes are already done for us -- check previous notes for more details
  // // Y axis
  // let leftAxis = d3.axisLeft(carbonScale)
  // let leftGridlines = d3.axisLeft(carbonScale)
  //                       .tickSize(-chartWidth-10)
  //                       .tickFormat("")
  // annotations.append("g")
  //   .attr("class", "y axis")
  //   .attr("transform","translate("+(margin.left-10)+","+margin.top+")")
  //   .call(leftAxis)
  // annotations.append("g")
  //   .attr("class", "y gridlines")
  //   .attr("transform","translate("+(margin.left-10)+","+margin.top+")")
  //   .call(leftGridlines);
  // 
  // // X axis
  // let bottomAxis = d3.axisBottom(dateScale)
  // let bottomGridlines = d3.axisBottom(dateScale)
  //                         .tickSize(-chartHeight-10)
  //                         .tickFormat("")
  // annotations.append("g")
  //   .attr("class", "x axis")
  //   .attr("transform","translate("+margin.left+","+(chartHeight+margin.top+10)+")")
  //   .call(bottomAxis);
  // annotations.append("g")
  //   .attr("class", "x gridlines")
  //   .attr("transform","translate("+margin.left+","+(chartHeight+margin.top+10)+")")
  //   .call(bottomGridlines);
  
  
  // 3. Before we start drawing, we need a line generator
  //  this will help us to draw the path based on data, which otherwise is very complicated
  
  
  
  // 4. Append a <path>, bind the data, and run the generator 
  
  
  
  // 5. Let's add some circles too!
  
  
  
  
  }, error => {console.log(error); } );  
  
  </script>
  
  
  
  
  
  


  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  document.getElementById("display1").innerText = document.getElementById("notes1").innerText;
  hljs.initHighlightingOnLoad();
  </script>



  </div>
</body>
</html>
